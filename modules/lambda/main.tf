resource "aws_iam_role" "default" {
  name = "${var.function_name}-execution-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Sid    = "AutoGenerated1"
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

data "aws_s3_bucket_object" "lambda_build" {
  bucket = var.s3_bucket
  key    = var.s3_key
}

resource "aws_lambda_function" "default" {
  s3_bucket                      = var.s3_bucket
  s3_key                         = var.s3_key
  function_name                  = var.function_name
  handler                        = var.function_handler
  memory_size                    = var.function_memory
  timeout                        = var.function_timeout
  reserved_concurrent_executions = var.function_concurrency

  source_code_hash = data.aws_s3_bucket_object.lambda_build.etag

  role = aws_iam_role.default.arn

  runtime = var.runtime

  dynamic "environment" {
    for_each = var.function_vars == null ? [] : [var.function_vars]
    content {
      variables = var.function_vars
    }
  }

  vpc_config {
    subnet_ids         = var.subnet_ids
    security_group_ids = var.security_group_ids
  }

  depends_on = [
    aws_iam_role.default,
    aws_iam_role_policy_attachment.default,
    aws_cloudwatch_log_group.default
  ]
}

resource "aws_cloudwatch_log_group" "default" {
  name              = "/aws/lambda/${var.function_name}"
  retention_in_days = 14
}

resource "aws_iam_policy" "default" {
  name        = "lambda_logging-${var.function_name}"
  path        = "/"
  description = "IAM policy for logging from a lambda"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect   = "Allow"
      Resource = "arn:aws:logs:*:*:*"
      Action = [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ]
    }]
  })
}

resource "aws_iam_role_policy_attachment" "default" {
  role       = aws_iam_role.default.name
  policy_arn = aws_iam_policy.default.arn
}

resource "aws_iam_role_policy_attachment" "additional_policies" {
  count      = length(var.additional_policies)
  role       = aws_iam_role.default.name
  policy_arn = var.additional_policies[count.index]
}
